
'use client';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { Code, Workflow, Cpu } from 'lucide-react';

// This data would ideally be dynamically generated by inspecting Genkit flows
const aiFlows = [
  {
    id: 'analyzeGrammar',
    name: 'Grammar Tool Assistant',
    description:
      'Analyzes a paragraph of text and provides grammar corrections and suggestions. Used in the Grammar Assistant tool.',
    model: 'googleai/gemini-2.5-flash (via genkit default)',
    inputSchema: `z.object({ text: z.string() })`,
    outputSchema: `z.object({ analysis: z.string() })`,
    path: 'src/ai/flows/grammar-tool-assistant.ts',
  },
  {
    id: 'generateStory',
    name: 'AI Story Generator',
    description:
      'Generates a short story based on a user-provided prompt. Used in the Story Generator tool.',
    model: 'gemini-2.5-flash',
    inputSchema: `z.object({ prompt: z.string(), modelId: z.string(), apiKey: z.string() })`,
    outputSchema: `z.object({ story: z.string() })`,
    path: 'src/ai/flows/story-generator.ts',
  },
  {
    id: 'improveSentence',
    name: 'Sentence Improver',
    description:
      'Rewrites a user-provided sentence in three different, more natural-sounding ways. Used in the Sentence Improver tool.',
    model: 'gemini-2.5-flash',
    inputSchema: `z.object({ text: z.string(), apiKey: z.string() })`,
    outputSchema: `z.object({ suggestions: z.array(z.string()) })`,
    path: 'src/ai/flows/sentence-improver.ts',
  },
  {
    id: 'generateQuiz',
    name: 'AI Quiz Generator',
    description:
      'Creates a 5-question multiple-choice quiz based on a given topic and difficulty. Used in the AI Quiz Arena.',
    model: 'gemini-2.5-flash',
    inputSchema: `z.object({ topic: z.string(), difficulty: z.enum(), apiKey: z.string() })`,
    outputSchema: `z.object({ quiz: z.array(QuizQuestionSchema) })`,
    path: 'src/ai/flows/quiz-generator.ts',
  },
  {
    id: 'generateDailyPractice',
    name: 'Daily Practice Generator',
    description:
      'Generates various types of daily exercises like vocabulary lists, jumbled sentences, and writing prompts. Used in the Daily Practice tool.',
    model: 'gemini-2.5-flash',
    inputSchema: `z.object({ practiceType: z.enum(), topic: z.string().optional(), apiKey: z.string() })`,
    outputSchema: `z.object({ output: z.any() })`,
    path: 'src/ai/flows/daily-practice-generator.ts',
  },
];

function CodeBlock({ code }: { code: string }) {
  return (
    <pre className="mt-2 rounded-md bg-secondary/50 p-3">
      <code className="text-sm font-mono text-foreground/80">{code}</code>
    </pre>
  );
}

export function AiFlowInspector() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>AI Flow Inspector</CardTitle>
        <CardDescription>
          Review the AI flows (server-side functions) running in the
          application. This shows their purpose, inputs, outputs, and the AI model used.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Accordion type="single" collapsible className="w-full">
          {aiFlows.map((flow) => (
            <AccordionItem value={flow.id} key={flow.id}>
              <AccordionTrigger className="text-base font-medium hover:no-underline">
                <div className="flex items-center gap-3">
                  <Workflow className="h-5 w-5 text-primary" />
                  <span>{flow.name}</span>
                </div>
              </AccordionTrigger>
              <AccordionContent className="space-y-4 pt-2">
                <p className="text-sm text-muted-foreground">
                  {flow.description}
                </p>
                <div className="flex flex-wrap gap-2 text-xs">
                  <Badge variant="outline">{flow.path}</Badge>
                   <Badge variant="secondary" className="flex items-center gap-1.5">
                    <Cpu className="h-3 w-3" />
                    {flow.model}
                  </Badge>
                </div>
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <h4 className="flex items-center font-semibold text-sm">
                      <Code className="mr-2 h-4 w-4" />
                      Input Schema (Zod)
                    </h4>
                    <p className="text-xs text-muted-foreground">Defines the data the flow expects.</p>
                    <CodeBlock code={flow.inputSchema} />
                  </div>
                  <div className="space-y-2">
                    <h4 className="flex items-center font-semibold text-sm">
                      <Code className="mr-2 h-4 w-4" />
                      Output Schema (Zod)
                    </h4>
                     <p className="text-xs text-muted-foreground">Defines the data the flow will return.</p>
                    <CodeBlock code={flow.outputSchema} />
                  </div>
                </div>
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </CardContent>
    </Card>
  );
}
